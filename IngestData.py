# -*- coding: utf-8 -*-
"""Datenbanken - Exc2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wjetUnLyxyToHoRuwCU_KduhiPsBAvdr
"""

"""# Data Management
## Summer Olympics Dataset Preparation and Ingestion

"""

import sys, csv, pandas as pd,psycopg2

db_host = sys.argv[-5]
db_port = sys.argv[-4]
db_name = sys.argv[-3]
db_user = sys.argv[-2]
db_password = sys.argv[-1]

#names of the csv files which contain the data
AthleteEvents = sys.argv[1]#'AthleteEvents.csv'
HostCities = sys.argv[2]#'HostCities.csv'
NOCRegions = sys.argv[3]#'NOCRegions.csv'

# Reading files into Pandas
dfAthleteEvents = pd.read_csv(AthleteEvents)
dfHostCities = pd.read_csv(HostCities)
dfNOCRegions = pd.read_csv(NOCRegions)

#dfHostCities.head(10)

#dfNOCRegions.head(2)

"""## Data Preparation"""


# 1. Loading countries

def GetCountries():
    df = dfNOCRegions.set_index("NOC").fillna("null")
    df["Region"] = df["Region"].str.replace(r"[\"\',]", '')
    return df

# GetCountries().values.tolist()
GetCountries()


def GetCities():
    df = dfHostCities[["City", "NOC"]].drop_duplicates().reset_index().drop(columns=['index']).fillna("null")
    df = df.drop(df[df["City"] == "Melbourne|Stockholm"].index)
    # newRows = pd.DataFrame([["Melbourne","AUS"],["Stockholm","SWE"]])
    df = df.append({'City': 'Melbourne', 'NOC': 'AUS'}, {'City': 'Stockholm', 'NOC': 'SWE'})
    df = df.sort_values(by="NOC").reset_index().drop(columns=['index'])
    return df

GetCities()


# 3. Loading games

def GetGames():
    dfGames = dfHostCities[['Year', 'StartDate', 'EndDate']].sort_values(by="Year")
    dfGames["Name"] = dfGames["Year"].astype(str) + " Summer"
    dfGames = dfGames.set_index("Year")

    return dfGames


GetGames()


# result = pd.merge(left, right, how="left", on=["key1", "key2"])

# 4. Connecting games and cities

def GetCitiesGames():
    dictCities = GetCities()["City"].to_dict()
    dfCityYear = dfHostCities[["City", "Year"]].drop_duplicates()
    dfCityYear = dfCityYear.drop(dfCityYear[dfCityYear["City"] == "Melbourne|Stockholm"].index)
    dfCityYear = dfCityYear.append({'City': 'Melbourne', 'Year': 1956}, {'City': 'Stockholm', 'Year': 1956})
    # counter = 0

    for i, r in enumerate(dfCityYear.itertuples(), 0):
        for k, v in dictCities.items():
            if r.City == v:
                dfCityYear.at[i, "City"] = k

    dfCityYear = dfCityYear.sort_values(by="Year")

    return dfCityYear


GetCitiesGames()


# 5. Table Teams

def GetTeams():
    df = dfAthleteEvents[["Team", "NOC", "Year"]].drop_duplicates().reset_index().drop(
        columns=['index']).dropna().astype({'Year': 'int'})
    df = df.sort_values(by="Year").reset_index().drop(columns=['index'])
    df["Team"] = df["Team"].str.replace(r"[\"\',]", '')
    df["TID"] = df.index+1
    return df.fillna("null")


GetTeams()


# 6. Table Athletes

def GetAthletes():
  df = dfAthleteEvents[["Name","Gender","DateOfBirth","Weight","Height"]]
  df["DateOfBirth"] = df["DateOfBirth"].fillna("1000-01-01")
  df["Name"] = df["Name"].str.replace(r"[\"\',]", '')
  df = df.drop_duplicates().reset_index().drop(columns=['index'])
  df["AID"] = df.index+1

  return df.fillna("null")

GetAthletes()


# 7. Athletes in Teams

def GetAthletesInTeams():
    dfAthletes = GetAthletes()
    dfTeams = GetTeams()
    # dictAthletes = dfAthletes.to_dict()
    # dictTeams = dfTeams.to_dict()

    # dfNew = pd.DataFrame(columns=["AID","TID"])

    dfAthTea = dfAthleteEvents[["Name", "Team", "Year"]].drop_duplicates().reset_index().drop(columns=['index'])
    dfAthTea["Team"] = dfAthTea["Team"].str.replace(r"[\"\',]", '')
    dfAthTea["Name"] = dfAthTea["Name"].str.replace(r"[\"\',]", '')

    dfAthTea = pd.merge(dfAthletes, dfAthTea)
    dfAthTea = pd.merge(dfAthTea, dfTeams)

    return dfAthTea[["AID", "TID"]]


GetAthletesInTeams()


# 8. Events table

def GetEvents():
    df = dfAthleteEvents[["Event", "Sport"]].drop_duplicates().dropna(how="all").reset_index().drop(columns=['index'])
    df["EID"] = df.index+1
    df["Event"] = df["Event"].str.replace(r"[\"\',]", '')
    df["Sport"] = df["Sport"].str.replace(r"[\"\',]", '')

    return df.fillna("null")


GetEvents()


def ProcessMedals(medal):
    if medal == "Gold":
        return "G"
    elif medal == "Silver":
        return "S"
    elif medal == "Bronze":
        return "B"
    else:
        return "NULL"


# 9. Results table

def GetResults():
    dfEvents = GetEvents()
    dfAthletes = GetAthletes()

    dfAthEv = dfAthleteEvents[["Year", "Event", "Name", "Medal"]].drop_duplicates().reset_index().drop(
        columns=['index'])
    dfAthEv["Event"] = dfAthEv["Event"].str.replace(r"[\"\',]", '')
    dfAthEv = pd.merge(dfAthEv, dfEvents)
    dfAthEv = pd.merge(dfAthEv, dfAthletes)
    dfAthEv = dfAthEv[["Year", "EID", "AID", "Medal"]].fillna("null")
    dfAthEv["Medal"] = dfAthEv["Medal"].apply(ProcessMedals)
    dfAthEv.drop_duplicates().reset_index().drop(columns=['index'])

    return dfAthEv


GetResults()


##### DATABASE

# Country insertion
def InsertCountries():
    dfCountries = GetCountries()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfCountries.itertuples(), 0):
        query = "INSERT INTO public.countries VALUES ('" + r.Index + "','" + r.Region + "'," + str(
            r.Population) + "," + str(r.GDP) + ")"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertCountries()

# City insertion
def InsertCities():
    dfCities = GetCities()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfCities.itertuples(), 0):
        query = "INSERT INTO public.cities VALUES (default,'" + r.City + "','" + r.NOC + "')"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertCities()

# Games Insertion
def InsertGames():
    dfGames = GetGames()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfGames.itertuples(), 0):
        query = "INSERT INTO public.games VALUES ("+str(r.Index)+",'"+r.Name+"','"+r.StartDate+"','"+r.EndDate+"')"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertGames()



# Cities-Games Insertion
def InsertCitiesGames():
    dfCitiesGames = GetCitiesGames()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfCitiesGames.itertuples(), 0):
        query = "INSERT INTO public.gamesin VALUES (" + str(r.Year) + "," + str(r.City+1) + ")"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertCitiesGames()

# Teams Insertion
def InsertTeams():
    dfTeams = GetTeams()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfTeams.itertuples(), 0):
        query = "INSERT INTO public.teams VALUES ("+str(r.TID)+",'"+str(r.Team)+"','"+str(r.NOC)+"',"+str(r.Year)+")"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertTeams()


#Athletes Insertion
def InsertAthletes():
    dfAthletes = GetAthletes()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfAthletes.itertuples(), 0):
        query = "INSERT INTO public.athletes VALUES (" + str(r.AID) + ",'" + r.Name + "','" + str(
            r.Gender) + "','" + str(r.DateOfBirth) + "'," + str(r.Height) + "," + str(r.Weight) + ")"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertAthletes()

# Athletes In Teams Insertion
def InsertAthletesInTeams():
    dfAthletesInTeams = GetAthletesInTeams()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfAthletesInTeams.itertuples(), 0):
        query = "INSERT INTO public.teamathletes VALUES (" + str(r.TID) + "," + str(r.AID) + ")"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertAthletesInTeams()

# Events Insertion
def InsertEvents():
    dfEvents = GetEvents()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfEvents.itertuples(), 0):
        query = "INSERT INTO public.events VALUES (" + str(r.EID) + ",'" + str(r.Event) + "','" + str(r.Sport) + "')"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertEvents()

#Results Insertion
def InsertResults():
    dfResults = GetResults()
    conn = psycopg2.connect(host=db_host, port=db_port, database=db_name, user=db_user, password=db_password)
    cur = conn.cursor()

    for i, r in enumerate(dfResults.itertuples(), 0):
        query = "INSERT INTO public.results VALUES (" + str(r.Year) + "," + str(r.EID) + "," + str(r.AID) + ",'"+r.Medal+"')"
        cur.execute(query)

    conn.commit()
    cur.close()
    conn.close()

InsertResults()



